//
// Created by Strik0r on 24-4-13.
//

#ifndef MATRIXTRANSPOSE_TRIPLEMATRIX_H
#define MATRIXTRANSPOSE_TRIPLEMATRIX_H

#define MAXSIZE 400
typedef int Element;
struct Triple {
    int row, col; // 元素的行号和列号
    Element element; // 元素的值
};
typedef struct Triple Triple;

struct TSMatrix {
    Triple data[MAXSIZE+1]; // 存放若干三元组的数组
    int rowCount, colCount, len; // 总行数, 总列数
};
typedef struct TSMatrix TSMatrix;

void printMatrix(TSMatrix *A) { // Generated by ChatGPT
    int i, j, k = 1; // k 用于指示当前遍历的三元组位置

    // 遍历矩阵的每一个位置
    for (i = 1; i <= A->rowCount; i++) {
        for (j = 1; j <= A->colCount; j++) {
            // 如果当前位置有非零元素且与当前遍历到的三元组位置相同，则输出该元素的值
            if (k <= A->len && A->data[k].row == i && A->data[k].col == j) {
                printf("%d\t", A->data[k].element);
                k++; // 移动到下一个三元组位置
            } else {
                printf("0\t"); // 否则输出 0
            }
        }
        printf("\n"); // 换行
    }
}

void printTripleMatrix(TSMatrix *A) {
    int i;
    for (i = 1; i <= A->len; i++) {
        printf("%d %d %d", A->data[i].row, A->data[i].col, A->data[i].element);
        if (i != A->len) printf("\n");
    }
}

#endif //MATRIXTRANSPOSE_TRIPLEMATRIX_H